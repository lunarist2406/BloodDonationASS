import { useEffect, useRef, useState } from 'react';
import { useLocation } from 'react-router-dom';
import { FaTimes, FaPaperPlane } from 'react-icons/fa';
import classNames from 'classnames/bind';
import styles from './ChatBot.module.css';
import io, { Socket } from 'socket.io-client';

const cx = classNames.bind(styles);

const hoverMessages = [
  'B·∫°n c·∫ßn t∆∞ v·∫•n g√¨ v·ªÅ hi·∫øn m√°u?',
  'H√¥m nay b·∫°n th·∫ø n√†o?',
];

const suggestions = [
  'Xem th√¥ng tin c√° nh√¢n c·ªßa t√¥i',
  'T√¨nh tr·∫°ng s·ª©c kh·ªèe c·ªßa t√¥i nh∆∞ th·∫ø n√†o?',
  'C√≥ bao nhi√™u trung t√¢m hi·∫øn m√°u?',
  'T√¨m trung t√¢m hi·∫øn m√°u g·∫ßn t√¥i nh·∫•t',
];

const hiddenPages = ['/', '/register', '/verify-code', '/forgot-password'];

const ChatBot: React.FC = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [hoverMessage, setHoverMessage] = useState('');
  const [input, setInput] = useState('');
  const [chat, setChat] = useState<{ sender: 'bot' | 'user'; text: string }[]>([]);
  const [loading, setLoading] = useState(false);

  const socketRef = useRef<Socket | null>(null);
  const timeoutRef = useRef<NodeJS.Timeout | null>(null);
  const messagesEndRef = useRef<HTMLDivElement | null>(null);
  const location = useLocation();

  const user = JSON.parse(localStorage.getItem('user') || '{}');
  const shouldHideChatBot = hiddenPages.includes(location.pathname);

  const toggleChat = () => setIsOpen((prev) => !prev);

  useEffect(() => {
    // Kh·ªüi t·∫°o socket m·ªõi m·ªói khi userId thay ƒë·ªïi
    const newSocket = io('https://blooddonation-be-production.up.railway.app/chatbot', {
      transports: ['websocket'],
      auth: {
        userID: user?.user_id || 'anonymous',
      },
    });

    socketRef.current = newSocket;

    newSocket.on('aiReply', (data: { message: string }) => {
      setLoading(false);
      if (timeoutRef.current) clearTimeout(timeoutRef.current);
      setChat((prev) => [...prev, { sender: 'bot', text: data.message }]);
    });

    newSocket.on('connect_error', (err) => {
      console.error('Socket connect error:', err);
    });

    return () => {
      newSocket.disconnect();
      socketRef.current = null;
    };
  }, [user?.user_id]);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [chat, loading]);

  const handleSendMessage = () => {
    if (!input.trim()) return;

    const message = input.trim();
    setChat((prev) => [...prev, { sender: 'user', text: message }]);
    setInput('');
    setLoading(true);

    socketRef.current?.emit('askAI', { message });

    // T·ª± ƒë·ªông ng·∫Øt loading n·∫øu ch·ªù qu√° l√¢u
    timeoutRef.current = setTimeout(() => {
      setLoading(false);
      setChat((prev) => [
        ...prev,
        { sender: 'bot', text: '‚è≥ Xin l·ªói, ph·∫£n h·ªìi b·ªã ch·∫≠m. Vui l√≤ng th·ª≠ l·∫°i!' },
      ]);
    }, 15000);
  };

  const handleClearChat = () => {
    setChat([]);
    setLoading(false);
    if (timeoutRef.current) clearTimeout(timeoutRef.current);
  };

  // Kh√¥ng hi·ªÉn th·ªã n·∫øu ·ªü trang kh√¥ng ph√π h·ª£p
  if (shouldHideChatBot) return null;

  return (
    <div className={cx('chatbot')}>
      {!isOpen && (
        <div
          className={cx('chat-icon')}
          onMouseEnter={() =>
            setHoverMessage(hoverMessages[Math.floor(Math.random() * hoverMessages.length)])
          }
          onMouseLeave={() => setHoverMessage('')}
          onClick={toggleChat}
        >
          <img src="/bot_icon.png" alt="Chat Icon" className={cx('bot-img')} />
          {hoverMessage && <div className={cx('hover-message')}>{hoverMessage}</div>}
        </div>
      )}

      <div className={cx('chat-popup', isOpen && 'open')}>
        <div className={cx('chat-header')}>
          <span>Tr·ª£ l√Ω hi·∫øn m√°u</span>
          <div className={cx('chat-header-actions')}>
            <button onClick={handleClearChat} className={cx('clear-btn')}>üóë X√≥a</button>
            <FaTimes className={cx('close-btn')} onClick={toggleChat} />
          </div>
        </div>

        <div className={cx('chat-content')}>
          {chat.map((msg, idx) => (
            <div key={idx} className={cx(msg.sender === 'user' ? 'user-msg' : 'bot-msg')}>
              {msg.text}
            </div>
          ))}
          {loading && <div className={cx('bot-msg')}>ƒêang so·∫°n c√¢u tr·∫£ l·ªùi...</div>}
          <div ref={messagesEndRef} />
        </div>

        <div className={cx('chat-footer')}>
          <div className={cx('suggestions')}>
            {suggestions.map((s, idx) => (
              <button
                key={idx}
                onClick={() => setInput(s)}
                className={cx('suggestion-btn')}
              >
                {s}
              </button>
            ))}
          </div>

          <div className={cx('input-area')}>
            <textarea
              className={cx('text-input')}
              value={input}
              placeholder="Nh·∫≠p tin nh·∫Øn..."
              onChange={(e) => setInput(e.target.value)}
              onKeyDown={(e) => {
                if (e.key === 'Enter' && !e.shiftKey) {
                  e.preventDefault();
                  handleSendMessage();
                }
              }}
            />
            <button onClick={handleSendMessage} className={cx('send-btn')}>
              <FaPaperPlane />
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ChatBot;